[0.004s][info][gc] Using Parallel
Class name: org.dacapo.harness.Kafka
Configurations:
short     Apache Kafka® is a distributed streaming platform.
long      Apache Kafka® aims to provide a unified, high-throughput, low-latency platform for handling real-time data feeds.
author    Apache Software Foundation
license   Apache License, Version 2.0
copyright Copyright (c) Apache Software Foundation
url       https://kafka.apache.org/
version   kafka 3.3.1
sizes     default large small
Using scaled threading model. 8 processors detected, 8 threads used to drive the workload, in a possible range of [1,unlimited]
[0.560s][info][gc] GC(0) Pause Young (Allocation Failure) 15M->2M(59M) 1.924ms
Version: kafka 3.3.1

Nominal statistics
Key Score  Rank Value Description
AOA:    4 11/18    54 nominal average object size (bytes)
AOL:    4 12/18    48 nominal 90-percentile object size (bytes)
AOM:    9  3/18    32 nominal median object size (bytes)
AOS:    3 14/18    16 nominal 10-percentile object size (bytes)
ARA:    2 15/18   595 nominal allocation rate (bytes / usec) (3026868936/5085700.0)
BAL:    2 16/19     1 nominal aaload per usec
BAS:    4 12/19     0 nominal aastore per usec
BEF:    3 14/19     3 nominal execution focus / dominance of hot code
BGF:    2 17/19    92 nominal getfield per usec
BPF:    2 16/19    25 nominal putfield per usec
BUB:    8  4/19   128 nominal thousands of unique bytecodes executed
BUF:    8  4/19    21 nominal thousands of unique function calls
GCA:    3 17/22    87 nominal average post-GC heap size as percent of min heap, when run at 2X min heap with G1 (172/196)
GCC:    2 19/22   247 nominal GC count at 2X heap size (G1)
GCM:    4 14/22    87 nominal median post-GC heap size as percent of min heap, when run at 2X min heap with G1 (171/196)
GCP:    1 21/22     0 nominal percentage of time spent in GC pauses at 2X heap size (G1) (450/55640)
GLK:    5 12/22     0 nominal percent 10th iteration memory leakage (10 iterations / 1 iterations) (196/196)
GMD:    9  3/22   191 nominal minimum heap size (MB) for default size configuration (with compressed pointers)
GML:    7  6/18   305 nominal minimum heap size (MB) for large size configuration (with compressed pointers)
GMS:   10  1/22   157 nominal minimum heap size (MB) for small size configuration (with compressed pointers)
GMU:    9  4/22   203 nominal minimum heap size (MB) for default size without compressed pointers
GSS:    1 21/22     0 nominal heap size sensitivity (slowdown with tight heap, as a percentage) (5099/5085.7)
GTO:    3 14/18    14 nominal memory turnover (total alloc bytes / min heap bytes)
PET:    9  3/22     6 nominal execution time (sec)
PKP:   10  2/22    31 nominal percentage of time spent in kernel mode (as percentage of user plus kernel time)
PPE:    1 20/22     3 nominal parallel efficiency (speedup as percentage of ideal speedup for 32 threads)
PSD:    8  6/22     1 nominal standard deviation among invocations at peak performance (as percentage of performance)
PWU:    7  7/22     5 nominal iterations to warm up to within 1.5% of best

Initializing callback
Starting Zookeeper...
[0.688s][info][gc] GC(1) Pause Young (Allocation Failure) 17M->6M(59M) 3.053ms
Starting Kafka Server...
[0.809s][info][gc] GC(2) Pause Young (Allocation Failure) 22M->8M(59M) 3.119ms
[0.894s][info][gc] GC(3) Pause Young (Allocation Failure) 24M->8M(75M) 1.881ms
[0.909s][info][gc] GC(4) Pause Young (Metadata GC Threshold) 11M->9M(75M) 2.445ms
[0.928s][info][gc] GC(5) Pause Full (Metadata GC Threshold) 9M->8M(75M) 19.311ms
[1.115s][info][gc] GC(6) Pause Young (Allocation Failure) 39M->9M(79M) 1.327ms
[1.314s][info][gc] GC(7) Pause Young (Allocation Failure) 168M->138M(208M) 1.363ms
[1.364s][info][gc] GC(8) Pause Young (Metadata GC Threshold) 149M->139M(238M) 2.754ms
[1.400s][info][gc] GC(9) Pause Full (Metadata GC Threshold) 139M->139M(238M) 35.877ms
[1.604s][info][gc] GC(10) Pause Young (System.gc()) 177M->141M(238M) 2.539ms
[1.637s][info][gc] GC(11) Pause Full (System.gc()) 141M->141M(238M) 32.710ms
===== DaCapo 23.11-chopin kafka starting =====
Trogdor is running the workload....
[1.873s][info][gc] GC(12) Pause Young (Allocation Failure) 203M->151M(238M) 2.447ms
[2.283s][info][gc] GC(13) Pause Young (Allocation Failure) 213M->154M(238M) 4.268ms
Starting 1000000 requests...
[2.749s][info][gc] GC(14) Pause Young (Allocation Failure) 215M->163M(297M) 5.619ms
[3.004s][info][gc] GC(15) Pause Young (Allocation Failure) 283M->174M(300M) 6.654ms
[3.075s][info][gc] GC(16) Pause Full (Ergonomics) 174M->169M(364M) 71.129ms
5%10%[3.294s][info][gc] GC(17) Pause Young (Allocation Failure) 328M->172M(424M) 2.703ms
15%20%[3.785s][info][gc] GC(18) Pause Young (Allocation Failure) 377M->173M(446M) 2.362ms
25%30%[4.363s][info][gc] GC(19) Pause Young (Allocation Failure) 400M->171M(446M) 2.397ms
35%40%[4.884s][info][gc] GC(20) Pause Young (Allocation Failure) 399M->172M(481M) 3.163ms
45%50%55%[5.571s][info][gc] GC(21) Pause Young (Allocation Failure) 442M->171M(487M) 2.403ms
60%65%70%[6.259s][info][gc] GC(22) Pause Young (Allocation Failure) 441M->171M(506M) 2.688ms
75%80%[6.968s][info][gc] GC(23) Pause Young (Allocation Failure) 464M->172M(509M) 2.262ms
85%90%95%[7.671s][info][gc] GC(24) Pause Young (Allocation Failure) 464M->172M(517M) 2.025ms
100%
Completed requests
Finished
===== DaCapo 23.11-chopin kafka PASSED in 6083 msec =====
===== DaCapo simple tail latency: 50% 10648 usec, 90% 26622 usec, 99% 113188 usec, 99.9% 115668 usec, 99.99% 116392 usec, max 116944 usec, measured over 1000000 events =====
===== DaCapo metered tail latency: 50% 70059 usec, 90% 106758 usec, 99% 181170 usec, 99.9% 197317 usec, 99.99% 199366 usec, max 200010 usec, measured over 1000000 events =====
runAgain
