[0.005s][info][gc] Using Parallel
Class name: org.dacapo.harness.Kafka
Configurations:
short     Apache Kafka® is a distributed streaming platform.
long      Apache Kafka® aims to provide a unified, high-throughput, low-latency platform for handling real-time data feeds.
author    Apache Software Foundation
license   Apache License, Version 2.0
copyright Copyright (c) Apache Software Foundation
url       https://kafka.apache.org/
version   kafka 3.3.1
sizes     default large small
Using scaled threading model. 8 processors detected, 8 threads used to drive the workload, in a possible range of [1,unlimited]
Version: kafka 3.3.1

Nominal statistics
Key Score  Rank Value Description
AOA:    4 11/18    54 nominal average object size (bytes)
AOL:    4 12/18    48 nominal 90-percentile object size (bytes)
AOM:    9  3/18    32 nominal median object size (bytes)
AOS:    3 14/18    16 nominal 10-percentile object size (bytes)
ARA:    2 15/18   595 nominal allocation rate (bytes / usec) (3026868936/5085700.0)
BAL:    2 16/19     1 nominal aaload per usec
BAS:    4 12/19     0 nominal aastore per usec
BEF:    3 14/19     3 nominal execution focus / dominance of hot code
BGF:    2 17/19    92 nominal getfield per usec
BPF:    2 16/19    25 nominal putfield per usec
BUB:    8  4/19   128 nominal thousands of unique bytecodes executed
BUF:    8  4/19    21 nominal thousands of unique function calls
GCA:    3 17/22    87 nominal average post-GC heap size as percent of min heap, when run at 2X min heap with G1 (172/196)
GCC:    2 19/22   247 nominal GC count at 2X heap size (G1)
GCM:    4 14/22    87 nominal median post-GC heap size as percent of min heap, when run at 2X min heap with G1 (171/196)
GCP:    1 21/22     0 nominal percentage of time spent in GC pauses at 2X heap size (G1) (450/55640)
GLK:    5 12/22     0 nominal percent 10th iteration memory leakage (10 iterations / 1 iterations) (196/196)
GMD:    9  3/22   191 nominal minimum heap size (MB) for default size configuration (with compressed pointers)
GML:    7  6/18   305 nominal minimum heap size (MB) for large size configuration (with compressed pointers)
GMS:   10  1/22   157 nominal minimum heap size (MB) for small size configuration (with compressed pointers)
GMU:    9  4/22   203 nominal minimum heap size (MB) for default size without compressed pointers
GSS:    1 21/22     0 nominal heap size sensitivity (slowdown with tight heap, as a percentage) (5099/5085.7)
GTO:    3 14/18    14 nominal memory turnover (total alloc bytes / min heap bytes)
PET:    9  3/22     6 nominal execution time (sec)
PKP:   10  2/22    31 nominal percentage of time spent in kernel mode (as percentage of user plus kernel time)
PPE:    1 20/22     3 nominal parallel efficiency (speedup as percentage of ideal speedup for 32 threads)
PSD:    8  6/22     1 nominal standard deviation among invocations at peak performance (as percentage of performance)
PWU:    7  7/22     5 nominal iterations to warm up to within 1.5% of best

Initializing callback
Starting Zookeeper...
Starting Kafka Server...
[0.909s][info][gc] GC(0) Pause Young (Metadata GC Threshold) 83M->9M(491M) 6.771ms
[0.921s][info][gc] GC(1) Pause Full (Metadata GC Threshold) 9M->8M(491M) 12.601ms
[1.409s][info][gc] GC(2) Pause Young (Metadata GC Threshold) 229M->139M(491M) 1.708ms
[1.451s][info][gc] GC(3) Pause Full (Metadata GC Threshold) 139M->139M(491M) 41.507ms
[1.700s][info][gc] GC(4) Pause Young (GCLocker Initiated GC) 188M->142M(491M) 1.564ms
===== DaCapo 23.11-chopin kafka starting =====
Trogdor is running the workload....
[2.233s][info][gc] GC(5) Pause Young (Metadata GC Threshold) 259M->153M(491M) 4.928ms
[2.293s][info][gc] GC(6) Pause Full (Metadata GC Threshold) 153M->153M(491M) 59.780ms
Starting 1000000 requests...
[2.931s][info][gc] GC(7) Pause Young (Allocation Failure) 282M->173M(487M) 5.540ms
5%[3.175s][info][gc] GC(8) Pause Young (Allocation Failure) 298M->176M(478M) 5.421ms
10%[3.406s][info][gc] GC(9) Pause Young (Allocation Failure) 291M->177M(478M) 3.381ms
15%[3.669s][info][gc] GC(10) Pause Young (Allocation Failure) 291M->179M(475M) 4.151ms
20%[3.955s][info][gc] GC(11) Pause Young (Allocation Failure) 281M->176M(445M) 6.644ms
25%[4.168s][info][gc] GC(12) Pause Young (Allocation Failure) 279M->178M(478M) 1.750ms
30%[4.397s][info][gc] GC(13) Pause Young (Allocation Failure) 280M->177M(477M) 1.789ms
35%[4.663s][info][gc] GC(14) Pause Young (Allocation Failure) 279M->178M(479M) 1.985ms
40%[4.892s][info][gc] GC(15) Pause Young (Allocation Failure) 282M->177M(478M) 1.664ms
45%[5.164s][info][gc] GC(16) Pause Young (Allocation Failure) 281M->178M(481M) 2.366ms
50%[5.453s][info][gc] GC(17) Pause Young (Allocation Failure) 285M->177M(480M) 3.655ms
55%[5.675s][info][gc] GC(18) Pause Young (Allocation Failure) 284M->179M(483M) 3.351ms
60%[5.968s][info][gc] GC(19) Pause Young (Allocation Failure) 290M->178M(482M) 4.751ms
65%[6.255s][info][gc] GC(20) Pause Young (Allocation Failure) 290M->178M(485M) 3.035ms
70%[6.552s][info][gc] GC(21) Pause Young (Allocation Failure) 294M->178M(484M) 2.307ms
75%[6.788s][info][gc] GC(22) Pause Young (Allocation Failure) 294M->177M(488M) 2.648ms
80%85%[7.101s][info][gc] GC(23) Pause Young (Allocation Failure) 299M->177M(487M) 2.061ms
90%[7.449s][info][gc] GC(24) Pause Young (Allocation Failure) 298M->177M(490M) 1.484ms
95%[7.754s][info][gc] GC(25) Pause Young (Allocation Failure) 303M->178M(489M) 2.637ms
100%
Completed requests
Finished
===== DaCapo 23.11-chopin kafka PASSED in 6141 msec =====
===== DaCapo simple tail latency: 50% 14422 usec, 90% 36124 usec, 99% 133284 usec, 99.9% 140613 usec, 99.99% 141349 usec, max 141912 usec, measured over 1000000 events =====
[8.082s][info][gc] GC(26) Pause Young (Allocation Failure) 303M->185M(491M) 1.878ms
===== DaCapo metered tail latency: 50% 66732 usec, 90% 93085 usec, 99% 161559 usec, 99.9% 165249 usec, 99.99% 166391 usec, max 166916 usec, measured over 1000000 events =====
runAgain
