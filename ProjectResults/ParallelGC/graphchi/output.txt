[0.018s][info][gc] Using Parallel
Using scaled threading model. 10 processors detected, 10 threads used to drive the workload, in a possible range of [1,unlimited]
Version: graphchi 0.2.2

Nominal statistics
Key Score  Rank Value Description
AOA:    8  4/18    97 nominal average object size (bytes)
AOL:    9  2/18    96 nominal 90-percentile object size (bytes)
AOM:    3 13/18    24 nominal median object size (bytes)
AOS:    3 14/18    16 nominal 10-percentile object size (bytes)
ARA:    5 10/18  2825 nominal allocation rate (bytes / usec) (7291380208/2580800.0)
BAL:    9  2/19  2231 nominal aaload per usec
BAS:    6  9/19     1 nominal aastore per usec
BEF:    8  4/19    12 nominal execution focus / dominance of hot code
BGF:    9  3/19  9335 nominal getfield per usec
BPF:    4 13/19    44 nominal putfield per usec
BUB:    0 19/19     8 nominal thousands of unique bytecodes executed
BUF:    2 17/19     1 nominal thousands of unique function calls
GCA:    8  5/22   114 nominal average post-GC heap size as percent of min heap, when run at 2X min heap with G1 (200/175)
GCC:    6 10/22  1277 nominal GC count at 2X heap size (G1)
GCM:    8  6/22   110 nominal median post-GC heap size as percent of min heap, when run at 2X min heap with G1 (193/175)
GCP:    4 14/22     2 nominal percentage of time spent in GC pauses at 2X heap size (G1) (889/31767)
GLK:    5 12/22     0 nominal percent 10th iteration memory leakage (10 iterations / 1 iterations) (175/174)
GMD:    8  5/22   175 nominal minimum heap size (MB) for default size configuration (with compressed pointers)
GML:    9  3/18  1152 nominal minimum heap size (MB) for large size configuration (with compressed pointers)
GMS:   10  2/22   141 nominal minimum heap size (MB) for small size configuration (with compressed pointers)
GMU:    8  6/22   179 nominal minimum heap size (MB) for default size without compressed pointers
GSS:    7  7/22   381 nominal heap size sensitivity (slowdown with tight heap, as a percentage) (12420.2/2580.8)
GTO:    4 11/18    39 nominal memory turnover (total alloc bytes / min heap bytes)
PET:    6  9/22     3 nominal execution time (sec)
PKP:    2 19/22     1 nominal percentage of time spent in kernel mode (as percentage of user plus kernel time)
PPE:    6  9/22    10 nominal parallel efficiency (speedup as percentage of ideal speedup for 32 threads)
PSD:    5 13/22     0 nominal standard deviation among invocations at peak performance (as percentage of performance)
PWU:    5 13/22     2 nominal iterations to warm up to within 1.5% of best

Initializing callback
[10.247s][info][gc] GC(0) Pause Young (System.gc()) 21M->3M(148M) 3.993ms
[10.259s][info][gc] GC(1) Pause Full (System.gc()) 3M->3M(148M) 11.412ms
Found shards -- no need to preprocess
Set latent factor dimension to: 20
Initializing latent factors for 285050 vertices
Creating 1 blocks
[10.998s][info][gc] GC(2) Pause Young (Allocation Failure) 170M->158M(276M) 76.588ms
[11.576s][info][gc] GC(3) Pause Young (Allocation Failure) 197M->164M(276M) 7.453ms
[12.183s][info][gc] GC(4) Pause Young (Allocation Failure) 203M->165M(315M) 3.120ms
[12.441s][info][gc] GC(5) Pause Young (Allocation Failure) 243M->164M(315M) 12.182ms
[12.469s][info][gc] GC(6) Pause Young (Allocation Failure) 242M->164M(376M) 7.496ms
[12.508s][info][gc] GC(7) Pause Young (Allocation Failure) 303M->165M(393M) 6.011ms
[12.542s][info][gc] GC(8) Pause Young (Allocation Failure) 303M->164M(531M) 6.901ms
[12.605s][info][gc] GC(9) Pause Young (Allocation Failure) 441M->164M(531M) 3.360ms
[13.140s][info][gc] GC(10) Pause Young (Allocation Failure) 441M->187M(697M) 86.060ms
[13.354s][info][gc] GC(11) Pause Young (Allocation Failure) 630M->194M(803M) 14.366ms
[13.476s][info][gc] GC(12) Pause Young (Allocation Failure) 739M->194M(973M) 18.542ms
[13.964s][info][gc] GC(13) Pause Young (Allocation Failure) 904M->226M(973M) 65.067ms
[14.554s][info][gc] GC(14) Pause Young (Allocation Failure) 936M->225M(997M) 53.113ms
[15.143s][info][gc] GC(15) Pause Young (Allocation Failure) 953M->197M(1001M) 141.831ms
[15.458s][info][gc] GC(16) Pause Young (Allocation Failure) 925M->227M(995M) 20.676ms
[16.161s][info][gc] GC(17) Pause Young (Allocation Failure) 950M->253M(983M) 37.691ms
[17.110s][info][gc] GC(18) Pause Full (Ergonomics) 253M->162M(1014M) 949.249ms
[17.549s][info][gc] GC(19) Pause Young (Allocation Failure) 880M->194M(999M) 128.136ms
[17.760s][info][gc] GC(20) Pause Young (Allocation Failure) 912M->195M(1006M) 80.222ms
[18.276s][info][gc] GC(21) Pause Young (Allocation Failure) 902M->192M(985M) 116.245ms
[18.822s][info][gc] GC(22) Pause Young (Allocation Failure) 899M->196M(1005M) 9.424ms
[19.030s][info][gc] GC(23) Pause Young (Allocation Failure) 899M->195M(952M) 10.115ms
[19.733s][info][gc] GC(24) Pause Young (Allocation Failure) 898M->225M(1005M) 74.200ms
[19.868s][info][gc] GC(25) Pause Young (Allocation Failure) 926M->224M(1005M) 17.598ms

Class name: org.dacapo.harness.GraphChi
Configurations:
short     ALS matrix factorization with GraphChi.
long      The Netflix Challenge dataset is used to drive the GraphChi engine in its ALS matrix factorization mode.  The input data is pre-sharding (sharding is IO intensive, so is excluded from this workload).
author    null
license   Apache License, Version 2.0
copyright Copyright 2012 Aapo Kyrola, Guy Blelloch, Carlos Guestrin / Carnegie Mellon University
url       https://github.com/GraphChi/graphchi-java
version   graphchi 0.2.2
sizes     default large small
===== DaCapo 23.11-chopin graphchi starting =====
===== DaCapo 23.11-chopin graphchi PASSED in 9793 msec =====

Total edges: 1000000
Left 284808, Right 241
runAgain
