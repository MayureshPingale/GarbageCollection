map@map-VirtualBox:~/Documents/Benchmarks/dacapo-23.11-chopin$ ../../epsilon-jdk/build/linux-x86_64-server-fastdebug/images/jdk/bin/java -Xlog:gc -XX:+UseParallelGC  -jar dacapo-23.11-chopin.jar kafka -v -p -d --latency-csv
[0.008s][info][gc] Using Parallel
Class name: org.dacapo.harness.Kafka
Configurations:
short     Apache Kafka® is a distributed streaming platform.
long      Apache Kafka® aims to provide a unified, high-throughput, low-latency platform for handling real-time data feeds.
author    Apache Software Foundation
license   Apache License, Version 2.0
copyright Copyright (c) Apache Software Foundation
url       https://kafka.apache.org/
version   kafka 3.3.1
sizes     default large small
Using scaled threading model. 10 processors detected, 10 threads used to drive the workload, in a possible range of [1,unlimited]
Version: kafka 3.3.1

Nominal statistics
Key Score  Rank Value Description
AOA:    4 11/18    54 nominal average object size (bytes)
AOL:    4 12/18    48 nominal 90-percentile object size (bytes)
AOM:    9  3/18    32 nominal median object size (bytes)
AOS:    3 14/18    16 nominal 10-percentile object size (bytes)
ARA:    2 15/18   595 nominal allocation rate (bytes / usec) (3026868936/5085700.0)
BAL:    2 16/19     1 nominal aaload per usec
BAS:    4 12/19     0 nominal aastore per usec
BEF:    3 14/19     3 nominal execution focus / dominance of hot code
BGF:    2 17/19    92 nominal getfield per usec
BPF:    2 16/19    25 nominal putfield per usec
BUB:    8  4/19   128 nominal thousands of unique bytecodes executed
BUF:    8  4/19    21 nominal thousands of unique function calls
GCA:    3 17/22    87 nominal average post-GC heap size as percent of min heap, when run at 2X min heap with G1 (172/196)
GCC:    2 19/22   247 nominal GC count at 2X heap size (G1)
GCM:    4 14/22    87 nominal median post-GC heap size as percent of min heap, when run at 2X min heap with G1 (171/196)
GCP:    1 21/22     0 nominal percentage of time spent in GC pauses at 2X heap size (G1) (450/55640)
GLK:    5 12/22     0 nominal percent 10th iteration memory leakage (10 iterations / 1 iterations) (196/196)
GMD:    9  3/22   191 nominal minimum heap size (MB) for default size configuration (with compressed pointers)
GML:    7  6/18   305 nominal minimum heap size (MB) for large size configuration (with compressed pointers)
GMS:   10  1/22   157 nominal minimum heap size (MB) for small size configuration (with compressed pointers)
GMU:    9  4/22   203 nominal minimum heap size (MB) for default size without compressed pointers
GSS:    1 21/22     0 nominal heap size sensitivity (slowdown with tight heap, as a percentage) (5099/5085.7)
GTO:    3 14/18    14 nominal memory turnover (total alloc bytes / min heap bytes)
PET:    9  3/22     6 nominal execution time (sec)
PKP:   10  2/22    31 nominal percentage of time spent in kernel mode (as percentage of user plus kernel time)
PPE:    1 20/22     3 nominal parallel efficiency (speedup as percentage of ideal speedup for 32 threads)
PSD:    8  6/22     1 nominal standard deviation among invocations at peak performance (as percentage of performance)
PWU:    7  7/22     5 nominal iterations to warm up to within 1.5% of best

Initializing callback
Starting Zookeeper...
Starting Kafka Server...
[1.713s][info][gc] GC(0) Pause Young (Allocation Failure) 40M->9M(148M) 52.476ms
[3.245s][info][gc] GC(1) Pause Young (Allocation Failure) 48M->10M(187M) 14.594ms
[3.288s][info][gc] GC(2) Pause Young (Metadata GC Threshold) 11M->10M(187M) 33.670ms
[3.623s][info][gc] GC(3) Pause Full (Metadata GC Threshold) 10M->10M(187M) 321.315ms
[5.835s][info][gc] GC(4) Pause Young (System.gc()) 186M->141M(315M) 28.206ms
[6.068s][info][gc] GC(5) Pause Full (System.gc()) 141M->141M(315M) 226.883ms
===== DaCapo 23.11-chopin kafka starting =====
Trogdor is running the workload....
[11.034s][info][gc] GC(6) Pause Young (Allocation Failure) 219M->153M(315M) 43.871ms
[13.844s][info][gc] GC(7) Pause Young (Metadata GC Threshold) 188M->154M(387M) 27.224ms
[14.151s][info][gc] GC(8) Pause Full (Metadata GC Threshold) 154M->154M(387M) 303.217ms
Starting 1000000 requests...
[22.613s][info][gc] GC(9) Pause Young (Allocation Failure) 304M->191M(393M) 103.884ms
5%[24.406s][info][gc] GC(10) Pause Young (Allocation Failure) 341M->212M(550M) 75.001ms
15%[26.142s][info][gc] GC(11) Pause Young (Allocation Failure) 504M->226M(558M) 177.693ms
30%[28.207s][info][gc] GC(12) Pause Young (Allocation Failure) 518M->240M(739M) 174.965ms
55%[31.988s][info][gc] GC(13) Pause Young (Allocation Failure) 708M->241M(850M) 153.512ms
[33.967s][info][gc] GC(14) Pause Full (Ergonomics) 241M->201M(1038M) 1975.105ms
90%[37.889s][info][gc] GC(15) Pause Young (Allocation Failure) 916M->208M(1044M) 55.137ms
100%
Completed requests
Finished
===== DaCapo 23.11-chopin kafka PASSED in 36499 msec =====
===== DaCapo simple tail latency: 50% 829409 usec, 90% 1618103 usec, 99% 4012335 usec, 99.9% 4035965 usec, 99.99% 4038185 usec, max 4042281 usec, measured over 1000000 events =====
===== DaCapo metered tail latency: 50% 1933151 usec, 90% 3549546 usec, 99% 4311382 usec, 99.9% 4349341 usec, 99.99% 4358298 usec, max 4360180 usec, measured over 1000000 events =====
runAgain

